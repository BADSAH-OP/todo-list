const $ = (s,p=document)=>p.querySelector(s);
const $$ = (s,p=document)=>[...p.querySelectorAll(s)];
const api = {
  async list(q={}){ const qs=new URLSearchParams(q); const r=await fetch('/api/tasks?'+qs); return r.json(); },
  async create(body){ const r=await fetch('/api/tasks',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}); return r.json(); },
  async update(id,body){ const r=await fetch('/api/tasks/'+id,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}); return r.json(); },
  async del(id){ const r=await fetch('/api/tasks/'+id,{method:'DELETE'}); return r.json(); },
  async clearCompleted(){ const r=await fetch('/api/tasks/clear-completed',{method:'POST'}); return r.json(); }
};
const state={filters:{search:'',status:'all',priority:'all',sort:'created_desc'}};
const tpl = $('#task-tpl');
function showToast(title, msg){ const t=$('#toast'); t.innerHTML=`<strong>${title}</strong><div style="opacity:.9;margin-top:6px">${msg}</div>`; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'),6000); }
function playDing(){ const a = $('#ding'); a.play().catch(()=>{ try{ const ctx=new (window.AudioContext||window.webkitAudioContext)(); const o=ctx.createOscillator(); const g=ctx.createGain(); o.type='sine'; o.frequency.value=880; o.connect(g); g.connect(ctx.destination); g.gain.setValueAtTime(0.0001,ctx.currentTime); g.gain.exponentialRampToValueAtTime(0.4,ctx.currentTime+0.01); o.start(); setTimeout(()=>{ g.gain.exponentialRampToValueAtTime(0.0001,ctx.currentTime+0.1); o.stop(ctx.currentTime+0.12); },120);}catch(e){} }); }
async function refresh(){ const list = await api.list(state.filters); const ul = $('#tasks'); ul.innerHTML=''; if(!list.length) $('#empty').style.display='block'; else $('#empty').style.display='none'; list.forEach(t=>{ const li = tpl.content.firstElementChild.cloneNode(true); li.dataset.id = t.id; li.classList.add(t.priority||'medium'); const done = li.querySelector('.done'); const title = li.querySelector('.title'); const notes = li.querySelector('.notes'); const dueDate = li.querySelector('.due-date'); const dueTime = li.querySelector('.due-time'); const prio = li.querySelector('.prio'); const tags = li.querySelector('.tags'); const remind = li.querySelector('.remind'); const badges = li.querySelector('.badges'); done.checked = !!t.done; title.value = t.title; notes.value = t.notes||''; dueDate.value = t.due_date||''; dueTime.value = t.due_time||''; prio.value = t.priority||'medium'; tags.value = t.tags||''; remind.value = String(t.remind_ahead_minutes||0); badges.innerHTML=''; if(t.due_at) badges.innerHTML += `<span class="badge">‚è∞ ${t.due_at.replace('T',' ')}</span>`; if(t.priority) badges.innerHTML += `<span class="badge">‚≠ê ${t.priority}</span>`; if(t.tags) badges.innerHTML += `<span class="badge"># ${t.tags}</span>`; done.addEventListener('change', async ()=>{ await api.update(t.id,{done: done.checked}); li.style.opacity = done.checked ? 0.6 : 1; }); li.querySelector('.save').addEventListener('click', async ()=>{ await api.update(t.id, { title: title.value.trim(), notes: notes.value.trim(), due_date: dueDate.value||null, due_time: dueTime.value||null, priority: prio.value, tags: tags.value.trim(), remind_ahead_minutes: Number(remind.value||0) }); li.animate([{boxShadow:'0 0 0 6px rgba(110,168,255,.12)'},{boxShadow:''}], {duration:260}); refresh(); }); li.querySelector('.del').addEventListener('click', async ()=>{ await api.del(t.id); refresh(); }); ul.appendChild(li); }); }
function wireUI(){ $('#create-form').addEventListener('submit', async (e)=>{ e.preventDefault(); const body = { title: $('#title').value.trim(), notes: $('#notes').value.trim(), priority: $('#priority').value, tags: $('#tags').value.trim(), due_date: $('#due_date').value || null, due_time: $('#due_time').value || null, remind_ahead_minutes: Number($('#remind').value || 0) }; await api.create(body); showToast('Task added', body.title); e.target.reset(); refresh(); }); $('#search').addEventListener('input', (e)=>{ state.filters.search = e.target.value; refresh(); }); $('#status').addEventListener('change', (e)=>{ state.filters.status = e.target.value; refresh(); }); $('#prio').addEventListener('change', (e)=>{ state.filters.priority = e.target.value; refresh(); }); $('#sort').addEventListener('change', (e)=>{ state.filters.sort = e.target.value; refresh(); }); $('#clear-completed').addEventListener('click', async ()=>{ await api.clearCompleted(); refresh(); }); const es = new EventSource('/api/stream'); es.addEventListener('reminder', (ev)=>{ const d = JSON.parse(ev.data); showToast('üîî Reminder', d.title); playDing(); if(document.hidden && 'Notification' in window){ if(Notification.permission === 'granted') new Notification('Reminder', {body: d.title}); else if(Notification.permission !== 'denied') Notification.requestPermission(); } refresh(); }); es.addEventListener('task_created', ()=>refresh()); es.addEventListener('task_updated', ()=>refresh()); es.addEventListener('task_deleted', ()=>refresh()); }
document.addEventListener('DOMContentLoaded', ()=>{ if('Notification' in window && Notification.permission === 'default') Notification.requestPermission(); wireUI(); refresh(); });
